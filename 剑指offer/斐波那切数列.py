# 刚开始解这道题的时候首先想到的是递归，但是时间超限，因为递归的时间复杂度为O(2^n)。
# 然后看了题解发现应该使用动态规划，动态规划有两种解法：
# 1.首先是传统的解法，但是空间复杂度会是O(n)
# 2.第二种解法是使用原地重复使用两个变量空间复杂度达到O(1)
# 时间复杂度: O(n)
# 当然这道题的最后要取模
# 这道题还有一个数学上的解法，时间复杂度回答道O(logn)，以后有时间在研究一下。

class Solution:
    def fib(self, n: int) -> int:
        func1 = 0
        func2 = 1
        for _ in range(n):
            func1, func2 = func2, func1+func2
        
        return func1 % 1000000007
